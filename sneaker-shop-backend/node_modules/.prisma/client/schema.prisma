generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  staff
  admin
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  fullName  String?
  phone     String?
  role      Role     @default(user)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // back-relation
  orders Order[] @relation("UserOrders")
}

model Brand {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String?   @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  slug      String?    @unique
  parentId  String?
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  Product[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
}

model Product {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  brandId     String?
  brand       Brand?    @relation(fields: [brandId], references: [id])
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  basePrice   Decimal   @default(0) @db.Decimal(10, 2)
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  variants ProductVariant[]

  // back-relation cho OrderItem
  orderItems OrderItem[] @relation("OrderItem_Product")
}

model ProductVariant {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  color  String?
  images String[] // mảng chuỗi, khớp code v.images as any
  sizes  VariantSize[]

  // back-relation cho OrderItem
  orderItems OrderItem[] @relation("OrderItem_Variant")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
}

model VariantSize {
  id        String         @id @default(uuid())
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  sizeUS Float?
  sizeEU Int?
  sizeCM Float?

  sku       String?  @unique
  price     Decimal? @db.Decimal(10, 2)
  qtyOnHand Int      @default(0) // để đúng với DTO và route hiện tại

  // back-relation cho OrderItem
  orderItems OrderItem[] @relation("OrderItem_VariantSize")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([variantId])
}

model Order {
  id String @id @default(uuid())

  userId String?
  user   User?   @relation(name: "UserOrders", fields: [userId], references: [id])

  status    String   @default("pending") // pending|paid|confirmed|shipped|completed|cancelled
  subtotal  Decimal  @default(0) @db.Decimal(12, 2)
  shipping  Decimal  @default(0) @db.Decimal(12, 2)
  total     Decimal  @default(0) @db.Decimal(12, 2)
  placedAt  DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  items OrderItem[]
}

model OrderItem {
  id String @id @default(uuid())

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(name: "OrderItem_Product", fields: [productId], references: [id])

  variantId String?
  variant   ProductVariant? @relation(name: "OrderItem_Variant", fields: [variantId], references: [id])

  variantSizeId String
  variantSize   VariantSize @relation(name: "OrderItem_VariantSize", fields: [variantSizeId], references: [id])

  quantity  Int     @default(1)
  unitPrice Decimal @db.Decimal(10, 2)

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
  @@index([variantSizeId])
}
